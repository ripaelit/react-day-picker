{"version":3,"sources":["../src/DateUtils.js"],"names":[],"mappings":"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","file":"DateUtils.js","sourcesContent":["const DateUtils = {\n\n  /**\n   * Clone a date object.\n   * \n   * @param  {Date} d The date to clone\n   * @return {Date} The cloned date\n   */\n  clone(d) {\n    return new Date(d.getTime());\n  },\n\n  /**\n   * Return `true` if two dates are the same day, ignoring the time.\n   * \n   * @param  {Date}  d1\n   * @param  {Date}  d2\n   * @return {Boolean}\n   */\n  isSameDay(d1, d2) {\n    return d1.getDate() === d2.getDate() &&\n      d1.getMonth() === d2.getMonth() &&\n      d1.getFullYear() === d2.getFullYear();\n  },\n\n  /**\n   * Return `true` if a day is in the past, e.g. yesterday or any day\n   * before yesterday.\n   *\n   * @param  {Date}  d\n   * @return {Boolean}\n   */\n  isPastDay(d) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return d < today;\n  },\n\n  /**\n   * Return `true` if day `d` is between days `d1` and `d2`, \n   * without including them.\n   *\n   * @param  {Date}  d\n   * @param  {Date}  d1\n   * @param  {Date}  d2\n   * @return {Boolean}\n   */\n  isDayBetween(d, d1, d2) {\n    d = DateUtils.clone(d);\n    d1 = DateUtils.clone(d1);\n    d2 = DateUtils.clone(d2);\n\n    d.setHours(0, 0, 0, 0);\n    d1.setHours(0, 0, 0, 0);\n    d2.setHours(0, 0, 0, 0);\n    return (d1 < d && d < d2) || (d2 < d && d < d1);\n  },\n\n  /**\n   * Add a day to a range and return a new range. A range is an object with\n   * `from` and `to` days.\n   *\n   * @param {Date} day\n   * @param {Object} range\n   * @return {Object} Returns a new range object\n   */\n  addDayToRange(day, range={from: null, to: null}) {\n    let { from, to } = range;\n    if (!from) {\n      from = day;\n    }\n    else if (from && to && DateUtils.isSameDay(from, to) && DateUtils.isSameDay(day, from)) {\n      from = null;\n      to = null;\n    }\n    else if (to && day < from) {\n      from = day;\n    }\n    else if (to && DateUtils.isSameDay(day, to)) {\n      from = day;\n      to = day;\n    }\n    else {\n      to = day;\n      if (to < from) {\n        to = from;\n        from = day;\n      }\n    }\n\n    return { from, to };\n  },\n\n  /**\n   * Return `true` if a day is included in a range of days.\n   *\n   * @param  {Date}  day\n   * @param  {Object}  range\n   * @return {Boolean}\n   */\n  isDayInRange(day, range) {\n    const { from, to } = range;\n    return (from && DateUtils.isSameDay(day, from)) ||\n      (to && DateUtils.isSameDay(day, to)) ||\n      (from && to && DateUtils.isDayBetween(day, from, to));\n  }\n\n};\n\nexport default DateUtils;\n"]}