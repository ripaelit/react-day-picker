{"version":3,"sources":["../../src/ModifiersUtils.js"],"names":["dayMatchesModifier","getModifiersForDay","day","modifier","arr","Array","isArray","some","mod","Date","after","before","modifiersObj","Object","keys","reduce","modifiers","modifierName","value","push"],"mappings":";;;;;QAWgBA,kB,GAAAA,kB;QAqCAC,kB,GAAAA,kB;;AAhDhB;;AACA;;AAEA;;;;;;;;AAQO,SAASD,kBAAT,CAA4BE,GAA5B,EAAiCC,QAAjC,EAA2C;AAChD,MAAI,CAACA,QAAL,EAAe;AACb,WAAO,KAAP;AACD;AACD,MAAMC,MAAMC,MAAMC,OAAN,CAAcH,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAjD;AACA,SAAOC,IAAIG,IAAJ,CAAS,eAAO;AACrB,QAAI,CAACC,GAAL,EAAU;AACR,aAAO,KAAP;AACD;AACD,QAAIA,eAAeC,IAAnB,EAAyB;AACvB,aAAO,0BAAUP,GAAV,EAAeM,GAAf,CAAP;AACD;AACD,QAAI,6BAAeA,GAAf,CAAJ,EAAyB;AACvB,aAAO,6BAAaN,GAAb,EAAkBM,GAAlB,CAAP;AACD;AACD,QAAIA,IAAIE,KAAR,EAAe;AACb,aAAO,2BAAWR,GAAX,EAAgBM,IAAIE,KAApB,CAAP;AACD;AACD,QAAIF,IAAIG,MAAR,EAAgB;AACd,aAAO,4BAAYT,GAAZ,EAAiBM,IAAIG,MAArB,CAAP;AACD;AACD,QAAI,OAAOH,GAAP,KAAe,UAAnB,EAA+B;AAC7B,aAAOA,IAAIN,GAAJ,CAAP;AACD;AACD,WAAO,KAAP;AACD,GApBM,CAAP;AAqBD;;AAED;;;;;;;;;AASO,SAASD,kBAAT,CAA4BC,GAA5B,EAAoD;AAAA,MAAnBU,YAAmB,uEAAJ,EAAI;;AACzD,SAAOC,OAAOC,IAAP,CAAYF,YAAZ,EAA0BG,MAA1B,CAAiC,UAACC,SAAD,EAAYC,YAAZ,EAA6B;AACnE,QAAMC,QAAQN,aAAaK,YAAb,CAAd;AACA,QAAIjB,mBAAmBE,GAAnB,EAAwBgB,KAAxB,CAAJ,EAAoC;AAClCF,gBAAUG,IAAV,CAAeF,YAAf;AACD;AACD,WAAOD,SAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD;;kBAEc,EAAEhB,sCAAF,EAAsBC,sCAAtB,E","file":"ModifiersUtils.js","sourcesContent":["import { isDayAfter, isDayBefore, isDayInRange, isSameDay } from './DateUtils';\nimport { isRangeOfDates } from './Helpers';\n\n/**\n * Return `true` if a date matches the specified modifier.\n * \n * @export\n * @param {Date} day\n * @param {Any} modifier \n * @return {Boolean}\n */\nexport function dayMatchesModifier(day, modifier) {\n  if (!modifier) {\n    return false;\n  }\n  const arr = Array.isArray(modifier) ? modifier : [modifier];\n  return arr.some(mod => {\n    if (!mod) {\n      return false;\n    }\n    if (mod instanceof Date) {\n      return isSameDay(day, mod);\n    }\n    if (isRangeOfDates(mod)) {\n      return isDayInRange(day, mod);\n    }\n    if (mod.after) {\n      return isDayAfter(day, mod.after);\n    }\n    if (mod.before) {\n      return isDayBefore(day, mod.before);\n    }\n    if (typeof mod === 'function') {\n      return mod(day);\n    }\n    return false;\n  });\n}\n\n/**\n * Return the modifiers matching the given day for the given\n * object of modifiers.\n * \n * @export\n * @param {Date} day\n * @param {Object} [modifiersObj={}] \n * @return {Array}\n */\nexport function getModifiersForDay(day, modifiersObj = {}) {\n  return Object.keys(modifiersObj).reduce((modifiers, modifierName) => {\n    const value = modifiersObj[modifierName];\n    if (dayMatchesModifier(day, value)) {\n      modifiers.push(modifierName);\n    }\n    return modifiers;\n  }, []);\n}\n\nexport default { dayMatchesModifier, getModifiersForDay };\n"]}